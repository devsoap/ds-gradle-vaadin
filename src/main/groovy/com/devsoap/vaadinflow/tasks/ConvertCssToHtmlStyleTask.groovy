/*
 * Copyright 2018-2019 Devsoap Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.devsoap.vaadinflow.tasks

import com.devsoap.vaadinflow.extensions.VaadinFlowPluginExtension
import org.gradle.api.DefaultTask
import org.gradle.api.file.FileTree
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

import java.nio.file.Paths

/**
 * Generates corresponding HTML files for CSS files located in frontend/styles
 *
 * @author John Ahlroos
 * @since 1.0
 */
@CacheableTask
class ConvertCssToHtmlStyleTask extends DefaultTask {

    static final String NAME = 'vaadinConvertStyleCssToHtml'

    static final String STYLES_TARGET_PATH = 'webapp-gen/frontend/styles'
    static final String CSS_REGEXP = '**/*.css'

    private static final String CSS = '.css'
    private static final String FRONTEND = 'frontend'
    private static final String STYLES = 'styles'

    @InputFiles
    final Closure<FileTree> cssFiles = {
        AssembleClientDependenciesTask assembleTask = project.tasks.findByName(AssembleClientDependenciesTask.NAME)
        File stylesPath = Paths.get(assembleTask.webappDir.canonicalPath, FRONTEND, STYLES).toFile()
        project.fileTree(stylesPath).matching { it.include(CSS_REGEXP) }
    }

    @InputFiles
    final Closure<FileTree> sassCssFiles = {
        File stylesPath = Paths.get(project.buildDir.canonicalPath, 'jsass').toFile()
        project.fileTree(stylesPath).matching { it.include(CSS_REGEXP) }
    }

    @OutputDirectory
    final File targetPath = new File(project.buildDir, STYLES_TARGET_PATH)

    ConvertCssToHtmlStyleTask() {
        group = 'vaadin'
        description = 'Wraps CSS files in HTML/JS wrappers'
    }

    @TaskAction
    void run() {
        VaadinFlowPluginExtension vaadin = project.extensions.getByType(VaadinFlowPluginExtension)
        if (vaadin.compatibilityMode) {
            convertToHtml(cssFiles.call())
            convertToHtml(sassCssFiles.call())
        } else {
            convertToJs(cssFiles.call())
            convertToJs(sassCssFiles.call())
        }
    }

    private void convertToHtml(FileTree tree) {
        tree.each {
            String content = """
            <!-- This is a autogenerated html file for ${it.name}. Do not edit this file, it will be overwritten. -->
            <custom-style><style>
            """.stripIndent()

            content += it.text

            content += '\n</style></custom-style>'

            targetPath.mkdirs()
            new File(targetPath, "${ it.name - CSS}.html" ).text = content
        }
    }

    private void convertToJs(FileTree tree) {
        tree.each {
            String content =
"""
// This is a autogenerated Javascript file for ${it.name}. Do not edit this file, it will be overwritten.
import '@polymer/polymer/lib/elements/custom-style.js';

const \$_documentContainer = document.createElement('template');
\$_documentContainer.innerHTML = `<style>
$it.text
</style>`;
document.head.appendChild(\$_documentContainer.content);
"""
            File stylesDir = Paths.get(project.buildDir.canonicalPath, FRONTEND, 'src', STYLES).toFile()
            stylesDir.mkdirs()
            new File(stylesDir, "${ it.name - CSS}.js" ).text = content
            new File(stylesDir, it.name).text = it.text
        }
    }
}
